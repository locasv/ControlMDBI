@model IEnumerable<ControlMDBI.Models.Vehiculo>

@{
    ViewData["Title"] = "Vehiculos";
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show border-0 shadow-sm mb-4" role="alert">
        <div class="d-flex align-items-center">
            <div class="flex-shrink-0">
                <i class="fas fa-exclamation-triangle fa-lg text-danger"></i>
            </div>
            <div class="flex-grow-1 ms-3">
                <h6 class="alert-heading mb-1 fw-bold">¡Error!</h6>
                <p class="mb-0">@TempData["ErrorMessage"]</p>
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show border-0 shadow-sm mb-4" role="alert">
        <div class="d-flex align-items-center">
            <div class="flex-shrink-0">
                <i class="fas fa-check-circle fa-lg text-success"></i>
            </div>
            <div class="flex-grow-1 ms-3">
                <h6 class="alert-heading mb-1 fw-bold">¡Éxito!</h6>
                <p class="mb-0">@TempData["SuccessMessage"]</p>
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>
}

<!-- Contenedor para mensajes dinámicos -->
<div id="dynamic-alert-container"></div>

<div class="container-fluid">
    <div class="row d-flex align-items-center justify-content-center">
        <div class="col-md-6 d-flex justify-content-center">
            <a class="btn-lg btn-blueMuni me-2" asp-controller="SolicitudVehiculos" asp-action="index">
                <i class="fa-regular fa-hand-point-up"></i>&nbsp;Solicitudes de Vehículos
            </a>
            <a class="btn-lg btn-blueMuni" asp-controller="AprobacionSolicitudes" asp-action="index">
                <i class="fa-duotone fa-solid fa-person-circle-check"></i>&nbsp;Revisión de Solicitudes de Vehículos
            </a>
        </div>
    </div>
</div>
<div class="mt-3" style="font-size: 14px;">
    <h1>Vehiculos</h1>
    <div class="row d-flex flex-column flex-md-row my-4">
        <div class="col-8 col-md-8 col-lg-6 mb-3 mb-md-0">
            <a class="btn-lg btn-success" asp-action="Create">
                <i class="fa-solid fa-plus me-2"></i>&nbsp;Agregar Vehiculo
            </a>

        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-hover text-nowrap">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Placa)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Estado)
                    </th>
                    <th>
                        Acciones
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr data-vehiculo-id="@item.IdVehiculo">
                        <td>
                            @Html.DisplayFor(modelItem => item.Placa)
                        </td>

                        <td class="estado-cell">
                            <!-- Select para editar el estado -->
                            <select class="form-select form-select-sm estado-select d-none"
                                    data-vehiculo-id="@item.IdVehiculo"
                                    data-original-estado="@item.Estado">
                                <option value="Activo" selected="@(item.Estado == "Activo")">Activo</option>
                                <option value="Inactivo" selected="@(item.Estado == "Inactivo")">Inactivo</option>
                                <option value="Mantenimiento" selected="@(item.Estado == "Mantenimiento")">Mantenimiento</option>
                                <option value="Circulando" selected="@(item.Estado == "Circulando")">Circulando</option>
                            </select>

                            <!-- Badge para mostrar el estado -->
                            <div class="estado-badge-container">
                                @if (item.Estado == "Activo")
                                {
                                    <span class="badge rounded-pill bg-success estado-badge" data-estado="Activo">
                                        Activo
                                        <i class="fas fa-edit ms-1 edit-estado-icon" style="cursor: pointer;" title="Editar estado"></i>
                                    </span>
                                }
                                else if (item.Estado == "Inactivo")
                                {
                                    <span class="badge rounded-pill bg-danger estado-badge" data-estado="Inactivo">
                                        Inactivo
                                        <i class="fas fa-edit ms-1 edit-estado-icon" style="cursor: pointer;" title="Editar estado"></i>
                                    </span>
                                }
                                else if(item.Estado == "Mantenimiento")
                                {
                                    <span class="badge rounded-pill bg-blueMuni-400 estado-badge" data-estado="Mantenimiento">
                                        Mantenimiento
                                        <i class="fas fa-edit ms-1 edit-estado-icon" style="cursor: pointer;" title="Editar estado"></i>
                                    </span>
                                }
                                else
                                {
                                        <span class="badge rounded-pill bg-warning estado-badge" data-estado="Circulando">
                                             Circulando
                                        <i class="fas fa-edit ms-1 edit-estado-icon" style="cursor: pointer;" title="Editar estado"></i>
                                        </span>
                                }
                            </div>

                            <!-- Botones de acción para guardar/cancelar -->
                            <div class="estado-actions d-none mt-1">
                                <button class="btn btn-sm btn-success save-estado-btn" data-vehiculo-id="@item.IdVehiculo" data-bs-toggle="tooltip" data-bs-placement="right" title="Guardar">
                                    <i class="fas fa-check"></i>
                                </button>
                                <button class="btn btn-sm btn-secondary cancel-estado-btn ms-1" data-vehiculo-id="@item.IdVehiculo" data-bs-toggle="tooltip" data-bs-placement="right" title="Cancelar">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </td>

                        <td style="position: sticky; right: 0;">
                            <a class="btn-sm btn-outline-blueMuni" asp-action="Edit" asp-route-id="@item.IdVehiculo" data-bs-toggle="tooltip" data-bs-placement="right" title="Detalles @item.Placa">
                                <i class="fa-solid fa-list me-2"></i>Detalles
                            </a>
                            @* <a class="btn-sm btn-danger" asp-action="Delete" asp-route-id="@item.IdVehiculo" data-bs-toggle="tooltip" data-bs-placement="right" title="Eliminar Vehiculo">
                                <i class="fa-solid fa-trash"></i>
                            </a> *@
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        // Inicializar tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        })

        // Función para mostrar alertas dinámicas
        function showDynamicAlert(message, type = 'success') {
            const alertContainer = document.getElementById('dynamic-alert-container');
            const alertId = 'alert-' + Date.now();

            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle';
            const title = type === 'success' ? '¡Éxito!' : '¡Error!';

            const alertHtml = `
                <div id="${alertId}" class="alert ${alertClass} alert-dismissible fade show border-0 shadow-sm mb-4" role="alert">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <i class="fas ${icon} fa-lg text-${type}"></i>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h6 class="alert-heading mb-1 fw-bold">${title}</h6>
                            <p class="mb-0">${message}</p>
                        </div>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                </div>
            `;

            alertContainer.innerHTML = alertHtml;

            // Auto-remover después de 5 segundos
            setTimeout(() => {
                const alert = document.getElementById(alertId);
                if (alert) {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                }
            }, 5000);
        }

        // Función para actualizar el badge del estado
        function updateEstadoBadge(vehiculoId, nuevoEstado) {
            const row = document.querySelector(`tr[data-vehiculo-id="${vehiculoId}"]`);
            const badgeContainer = row.querySelector('.estado-badge-container');

            let badgeClass, badgeText;
            switch(nuevoEstado) {
                case 'Activo':
                    badgeClass = 'bg-success';
                    badgeText = 'Activo';
                    break;
                case 'Inactivo':
                    badgeClass = 'bg-danger';
                    badgeText = 'Inactivo';
                    break;
                case 'Mantenimiento':
                    badgeClass = 'bg-blueMuni-400';
                    badgeText = 'Mantenimiento';
                    break;
                case 'Circulando':
                    badgeClass ='bg-warning'
                    badgeText = 'Circulando'
                    break;
            }

            badgeContainer.innerHTML = `
                <span class="badge rounded-pill ${badgeClass} estado-badge" data-estado="${nuevoEstado}">
                    ${badgeText}
                    <i class="fas fa-edit ms-1 edit-estado-icon" style="cursor: pointer;" title="Editar estado"></i>
                </span>
            `;
        }

        // Event listeners
        document.addEventListener('click', function(e) {
            // Editar estado
            if (e.target.classList.contains('edit-estado-icon')) {
                const cell = e.target.closest('.estado-cell');
                const select = cell.querySelector('.estado-select');
                const badgeContainer = cell.querySelector('.estado-badge-container');
                const actions = cell.querySelector('.estado-actions');

                // Mostrar select y botones, ocultar badge
                select.classList.remove('d-none');
                actions.classList.remove('d-none');
                badgeContainer.classList.add('d-none');
            }

            // Guardar estado
            if (e.target.closest('.save-estado-btn')) {
                const btn = e.target.closest('.save-estado-btn');
                const vehiculoId = btn.dataset.vehiculoId;
                const cell = btn.closest('.estado-cell');
                const select = cell.querySelector('.estado-select');
                const nuevoEstado = select.value;

                // Deshabilitar botón mientras se procesa
                btn.disabled = true;
                btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';

                // Hacer petición AJAX
                fetch('@Url.Action("UpdateEstado", "Vehiculos")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: `id=${vehiculoId}&nuevoEstado=${encodeURIComponent(nuevoEstado)}`
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Actualizar badge
                        updateEstadoBadge(vehiculoId, nuevoEstado);

                        // Actualizar valor original en el select
                        select.dataset.originalEstado = nuevoEstado;

                        // Mostrar mensaje de éxito
                        showDynamicAlert(data.message, 'success');

                        // Ocultar select y botones, mostrar badge
                        const badgeContainer = cell.querySelector('.estado-badge-container');
                        const actions = cell.querySelector('.estado-actions');

                        select.classList.add('d-none');
                        actions.classList.add('d-none');
                        badgeContainer.classList.remove('d-none');
                    } else {
                        showDynamicAlert(data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showDynamicAlert('Error al actualizar el estado', 'error');
                })
                .finally(() => {
                    // Rehabilitar botón
                    btn.disabled = false;
                    btn.innerHTML = '<i class="fas fa-check"></i>';
                });
            }

            // Cancelar edición
            if (e.target.closest('.cancel-estado-btn')) {
                const btn = e.target.closest('.cancel-estado-btn');
                const cell = btn.closest('.estado-cell');
                const select = cell.querySelector('.estado-select');
                const badgeContainer = cell.querySelector('.estado-badge-container');
                const actions = cell.querySelector('.estado-actions');

                // Restaurar valor original
                select.value = select.dataset.originalEstado;

                // Ocultar select y botones, mostrar badge
                select.classList.add('d-none');
                actions.classList.add('d-none');
                badgeContainer.classList.remove('d-none');
            }
        });
    </script>
}